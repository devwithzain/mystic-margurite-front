generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blogs {
  id                BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  title             String     @db.VarChar(255)
  short_description String     @db.Text
  description       String     @db.LongText
  category          String     @db.VarChar(255)
  image             String?    @db.VarChar(255)
  created_at        DateTime?  @db.Timestamp(0)
  updated_at        DateTime?  @db.Timestamp(0)
  comments          comments[]
}

model booking_details {
  id             BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  service_id     BigInt     @db.UnsignedBigInt
  booking_id     BigInt     @db.UnsignedBigInt
  time_slot_id   BigInt     @db.UnsignedBigInt
  birth_date     DateTime   @db.Date
  birth_time     DateTime?  @db.Time(0)
  birth_place    String?    @db.VarChar(255)
  meeting_link   String?    @db.VarChar(255)
  first_name     String     @db.VarChar(255)
  last_name      String     @db.VarChar(255)
  phone          String     @db.VarChar(255)
  email          String     @db.VarChar(255)
  country        String     @db.VarChar(255)
  street_address String     @db.VarChar(255)
  town_city      String     @db.VarChar(255)
  state          String     @db.VarChar(255)
  zip            String?    @db.VarChar(255)
  timezone       String?    @db.VarChar(255)
  notes          String?    @db.Text
  status         String     @default("scheduled") @db.VarChar(255)
  created_at     DateTime?  @db.Timestamp(0)
  updated_at     DateTime?  @db.Timestamp(0)
  bookings       bookings   @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "booking_details_booking_id_foreign")
  services       services   @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "booking_details_service_id_foreign")
  time_slots     time_slots @relation(fields: [time_slot_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "booking_details_time_slot_id_foreign")

  @@index([booking_id], map: "booking_details_booking_id_foreign")
  @@index([service_id], map: "booking_details_service_id_foreign")
  @@index([time_slot_id], map: "booking_details_time_slot_id_foreign")
}

model booking_items {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  booking_id BigInt    @db.UnsignedBigInt
  service_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  bookings   bookings  @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "booking_items_booking_id_foreign")
  services   services  @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "booking_items_service_id_foreign")

  @@index([booking_id], map: "booking_items_booking_id_foreign")
  @@index([service_id], map: "booking_items_service_id_foreign")
}

model bookings {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt            @db.UnsignedBigInt
  status          String            @default("pending") @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  booking_details booking_details[]
  booking_items   booking_items[]
  users           users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bookings_user_id_foreign")

  @@index([user_id], map: "bookings_user_id_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model carts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  product_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "carts_product_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "carts_user_id_foreign")

  @@index([product_id], map: "carts_product_id_foreign")
  @@index([user_id], map: "carts_user_id_foreign")
}

model categories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @unique(map: "categories_title_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model checkout_details {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order_id       BigInt    @db.UnsignedBigInt
  first_name     String    @db.VarChar(255)
  last_name      String    @db.VarChar(255)
  phone          String    @db.VarChar(255)
  email          String    @db.VarChar(255)
  country        String    @db.VarChar(255)
  street_address String    @db.VarChar(255)
  town_city      String    @db.VarChar(255)
  state          String    @db.VarChar(255)
  zip            String?   @db.VarChar(255)
  agreed_terms   Boolean   @default(false)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  orders         orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "checkout_details_order_id_foreign")

  @@index([order_id], map: "checkout_details_order_id_foreign")
}

model comments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  blog_id    BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  content    String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  blogs      blogs     @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_blog_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_user_id_foreign")

  @@index([blog_id], map: "comments_blog_id_foreign")
  @@index([user_id], map: "comments_user_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model newsletter_subscribers {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email       String    @unique(map: "newsletter_subscribers_email_unique") @db.VarChar(255)
  token       String?   @db.VarChar(255)
  is_verified Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model order_items {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order_id   BigInt    @db.UnsignedBigInt
  product_id BigInt    @db.UnsignedBigInt
  quantity   Int       @default(1)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_items_order_id_foreign")
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_items_product_id_foreign")

  @@index([order_id], map: "order_items_order_id_foreign")
  @@index([product_id], map: "order_items_product_id_foreign")
}

model orders {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt             @db.UnsignedBigInt
  status           String             @default("pending") @db.VarChar(255)
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  checkout_details checkout_details[]
  order_items      order_items[]
  users            users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "orders_user_id_foreign")

  @@index([user_id], map: "orders_user_id_foreign")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model products {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  title       String        @db.VarChar(255)
  price       String        @db.VarChar(255)
  description String        @db.Text
  image       String?       @db.LongText
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  carts       carts[]
  order_items order_items[]
}

model services {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  title           String            @db.VarChar(255)
  description     String            @db.Text
  price           String            @db.VarChar(255)
  image           String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  booking_details booking_details[]
  booking_items   booking_items[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model time_slots {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  date            DateTime          @db.Date
  start_time      DateTime          @db.Time(0)
  end_time        DateTime          @db.Time(0)
  status          time_slots_status @default(available)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  booking_details booking_details[]
}

model users {
  id                BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name              String     @db.VarChar(255)
  email             String     @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?  @db.Timestamp(0)
  password          String     @db.VarChar(255)
  role              String     @default("user") @db.VarChar(255)
  image             String?    @db.VarChar(255)
  remember_token    String?    @db.VarChar(100)
  created_at        DateTime?  @db.Timestamp(0)
  updated_at        DateTime?  @db.Timestamp(0)
  bookings          bookings[]
  carts             carts[]
  comments          comments[]
  orders            orders[]
}

enum time_slots_status {
  available
  booked
  unavailable
}
